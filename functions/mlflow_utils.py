import subprocess
import os
import mlflow
import time
import requests

def _is_mlflow_server_running(tracking_uri):
    """Check if the MLflow server is running by sending a request to the tracking URI."""
    try:
        response = requests.get(tracking_uri)
        return response.status_code == 200
    except requests.exceptions.ConnectionError:
        return False

def start_mlflow_server(experiment_name=""):
    """Launches an MLflow server in a background process, which can be accessed at http://127.0.0.1:5000
    All files generated by MLflow will be saved in the mlflow folder

    Args:
        experiment_name (str): Name of the MLflow experiment, must not be empty. Defaults to "".
    """
    #disallow empty experiment name
    assert experiment_name != ""
    timeout_sec = 30

    #define the path to the MLflow artifacts folder
    relative_artifacts_path = "../mlflow"
    absolute_artifacts_path = os.path.abspath(relative_artifacts_path)

    #convert the absolute path to a proper file URI
    if os.name == 'nt': #windows
        tracking_uri = f"file:///{absolute_artifacts_path.replace(os.sep, '/')}"
    else: #macOS and Linux
        tracking_uri = f"file://{absolute_artifacts_path}"

    #set the tracking URI to the desired folder
    client = mlflow.MlflowClient(tracking_uri=tracking_uri)
    print(type(client))
    #mlflow.set_tracking_uri(tracking_uri)
    print(f"Tracking URI set to: {tracking_uri}")

    #define the command to start the MLflow server
    command = [
        "mlflow", "server",
        "--backend-store-uri", tracking_uri,
        "--default-artifact-root", tracking_uri
    ]

    #run the command based on the operating system
    if os.name == "nt": #windows
        subprocess.Popen(command, creationflags=subprocess.CREATE_NEW_CONSOLE)
    else: #macOS and Linux
        subprocess.Popen(command, start_new_session=True)

    print("MLflow server started in the background")

    # check if the server is running
    start_time = time.time()
    while not _is_mlflow_server_running(tracking_url):
        if time.time() - start_time > timeout_sec:
            raise TimeoutError(f"MLflow server did not start within {timeout_sec} seconds.")
        time.sleep(1)  # wait for 1 second before retrying
    print("MLflow server is running")

    mlflow.set_experiment(experiment_name)
    return client